#include<iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int data) {
        this->data = data;
        next = nullptr;
    }
};

ListNode* merge(Node* list1, Node* list2) {
    Node dummy(0);  
    Node* current = &dummy;

    while (list1 && list2) {
        if (list1->val < list2->val) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

   
    current->next = list1 ? list1 : list2;

    return dummy.next;
}


class LinkedList {
public:
    Node* head;
    LinkedList() {
        head = nullptr;
    }

    ~LinkedList() {
        Node* temp = head;
        while (temp) {
            Node* next = temp->next;
            delete temp;
            temp = next;
        }
    }

    void insertAtFirst(int value) {
        Node* newnode = new Node(value);
        newnode->next = head;
        head = newnode;
    }

    void insertAtEnd(int val) {
        Node* newnode = new Node(val);
        if (head == nullptr) {
            head = newnode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newnode;
        }
    }

    void printList(Node* node) {
        while (node) {
            cout << node->data << " ";
            node = node->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList l1;
    LinkedList l2;

    l1.insertAtEnd(1);
    l1.insertAtEnd(2);
    l1.insertAtEnd(3);

    l2.insertAtEnd(4);
    l2.insertAtEnd(5);

    Node* mergedHead = merge(l1.head, l2.head);

    l1.printList(mergedHead);

    return 0;
}
